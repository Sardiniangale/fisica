import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit 

t = [2.517249, 3.57361, 4.629958, 5.68628, 6.742587, 7.798921, 8.855212, 9.911506, 10.967796, 12.024066, 13.080341, 14.136583, 15.192815, 16.249049, 17.305299, 18.361538, 19.417754, 20.473957, 21.530154, 22.586316, 23.642492, 24.698673, 25.754811, 26.81094, 27.86708, 28.923203, 29.979318, 31.035416, 32.091496, 33.147564, 34.203623, 35.259682, 36.315737, 37.371797, 38.427843, 39.483855, 40.539863, 41.595862, 42.651835, 43.707798, 44.763789, 45.819749, 46.875699, 47.931645, 48.987589, 50.043515, 51.099443, 52.155348, 53.211256, 54.26714, 55.323003, 56.378872, 57.434722, 58.49055, 59.546408, 60.60222, 61.658023, 62.713816, 63.769613, 64.825371, 65.881136, 66.936905, 67.992684, 69.048415, 70.104166, 71.159921, 72.215661, 73.271408, 74.327136, 75.382821, 76.438475, 77.49413, 78.54979, 79.605467, 80.661144, 81.716772, 82.772394, 83.828009, 84.883632, 85.939237, 86.994833, 88.050441, 89.106045, 90.161618, 91.217186, 92.272705]
t_transit = [0.032222, 0.032304, 0.032384, 0.032468, 0.032554, 0.032626, 0.032708, 0.0328, 0.032888, 0.032976, 0.033058, 0.033138, 0.033226, 0.03331, 0.033394, 0.03348, 0.033564, 0.033646, 0.033732, 0.03382, 0.033904, 0.033986, 0.034078, 0.034168, 0.034256, 0.034346, 0.034424, 0.034512, 0.034604, 0.034696, 0.034786, 0.034868, 0.034954, 0.035038, 0.035126, 0.035222, 0.035314, 0.0354, 0.035486, 0.03558, 0.03567, 0.035758, 0.035838, 0.03593, 0.03603, 0.036122, 0.036222, 0.036316, 0.0364, 0.036476, 0.036562, 0.036668, 0.036764, 0.036852, 0.036956, 0.037056, 0.037138, 0.037224, 0.037314, 0.037406, 0.037504, 0.037606, 0.0377, 0.037794, 0.037892, 0.037974, 0.038062, 0.038164, 0.038272, 0.038374, 0.03847, 0.03856, 0.038652, 0.038742, 0.03884, 0.038948, 0.039036, 0.039122, 0.03924, 0.039338, 0.039426, 0.039534, 0.03963, 0.039724, 0.039816, 0.039922]

# Constants
l = 109.65
d = 115.25
w = 1.9
grav_constant = 9.81



v0 = (w / np.array(t_transit)) * (l / d)


periodo = [
    2.112757, 2.112709, 2.112670, 2.112629, 2.112641, 
    2.112625, 2.112585, 2.112584, 2.112560, 2.112545, 
    2.112517, 2.112474, 2.112466, 2.112484, 2.112489, 
    2.112455, 2.112419, 2.112400, 2.112359, 2.112338, 
    2.112357, 2.112319, 2.112267, 2.112269, 2.112263, 
    2.112238, 2.112213, 2.112178, 2.112148, 2.112127, 
    2.112118, 2.112114, 2.112115, 2.112106, 2.112058, 
    2.112020, 2.112007, 2.111972, 2.111936, 2.111954, 
    2.111951, 2.111910, 2.111896, 2.111890, 2.111870, 
    2.111854, 2.111833, 2.111813, 2.111792, 2.111747, 
    2.111732, 2.111719, 2.111678, 2.111686, 2.111670, 
    2.111615, 2.111596, 2.111590, 2.111555, 2.111523, 
    2.111534, 2.111548, 2.111510, 2.111482, 2.111506, 
    2.111495, 2.111487, 2.111475, 2.111413, 2.111339, 
    2.111309, 2.111315, 2.111337, 2.111354, 2.111305, 
    2.111250, 2.111237, 2.111238, 2.111228, 2.111201, 
    2.111204, 2.111212, 2.111177, 2.111141, 2.111087, 
    2.111033
]

angle = np.arccos(1 - (v0**2) / (2 * grav_constant * l))
 
print("plotting")

x = angle
y = periodo

# Define the theoretical model to fit
def model_func(theta, a, b):
    return 2 * np.pi * np.sqrt(l / grav_constant) * (1 + a * theta**2 + b * theta**4)

# Perform nonlinear curve fitting
popt, pcov = curve_fit(model_func, x, y, p0=[0, 0])
a_fit, b_fit = popt

yerr = 0.000000000000001
xerr = 0.000000000000001

# Create figure
fig, ax = plt.subplots(figsize=(10, 6))

# Plot raw data with error bars
ax.errorbar(x, y, yerr=yerr, xerr=xerr, fmt='o', 
           markersize=8, capsize=5, label='raw data')

# Generate fitted curve
x_fit = np.linspace(min(x), max(x), 100)
y_fit = model_func(x_fit, a_fit, b_fit)
ax.plot(x_fit, y_fit, 'r--', 
        label=f'Fit: $T = 2\pi\\sqrt{{l/g}}(1 + {a_fit:.5f}\\theta^2 + {b_fit:.5f}\\theta^4)$')

# Formatting
ax.set(xlabel='Angle',
       ylabel='Period',
       title='Angle vs Period')
ax.legend()
ax.grid(True, linestyle='--', alpha=0.6)

plt.tight_layout()
plt.show()

