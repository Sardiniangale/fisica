# Given data as a multi-line string
data = """2.517249	2.112757	0.032222
3.573610	2.112709	0.032304
4.629958	2.112670	0.032384
5.686280	2.112629	0.032468
6.742587	2.112641	0.032554
7.798921	2.112625	0.032626
8.855212	2.112585	0.032708
9.911506	2.112584	0.032800
10.967796	2.112560	0.032888
12.024066	2.112545	0.032976
13.080341	2.112517	0.033058
14.136583	2.112474	0.033138
15.192815	2.112466	0.033226
16.249049	2.112484	0.033310
17.305299	2.112489	0.033394
18.361538	2.112455	0.033480
19.417754	2.112419	0.033564
20.473957	2.112400	0.033646
21.530154	2.112359	0.033732
22.586316	2.112338	0.033820
23.642492	2.112357	0.033904
24.698673	2.112319	0.033986
25.754811	2.112267	0.034078
26.810940	2.112269	0.034168
27.867080	2.112263	0.034256
28.923203	2.112238	0.034346
29.979318	2.112213	0.034424
31.035416	2.112178	0.034512
32.091496	2.112148	0.034604
33.147564	2.112127	0.034696
34.203623	2.112118	0.034786
35.259682	2.112114	0.034868
36.315737	2.112115	0.034954
37.371797	2.112106	0.035038
38.427843	2.112058	0.035126
39.483855	2.112020	0.035222
40.539863	2.112007	0.035314
41.595862	2.111972	0.035400
42.651835	2.111936	0.035486
43.707798	2.111954	0.035580
44.763789	2.111951	0.035670
45.819749	2.111910	0.035758
46.875699	2.111896	0.035838
47.931645	2.111890	0.035930
48.987589	2.111870	0.036030
50.043515	2.111854	0.036122
51.099443	2.111833	0.036222
52.155348	2.111813	0.036316
53.211256	2.111792	0.036400
54.267140	2.111747	0.036476
55.323003	2.111732	0.036562
56.378872	2.111719	0.036668
57.434722	2.111678	0.036764
58.490550	2.111686	0.036852
59.546408	2.111670	0.036956
60.602220	2.111615	0.037056
61.658023	2.111596	0.037138
62.713816	2.111590	0.037224
63.769613	2.111555	0.037314
64.825371	2.111523	0.037406
65.881136	2.111534	0.037504
66.936905	2.111548	0.037606
67.992684	2.111510	0.037700
69.048415	2.111482	0.037794
70.104166	2.111506	0.037892
71.159921	2.111495	0.037974
72.215661	2.111487	0.038062
73.271408	2.111475	0.038164
74.327136	2.111413	0.038272
75.382821	2.111339	0.038374
76.438475	2.111309	0.038470
77.494130	2.111315	0.038560
78.549790	2.111337	0.038652
79.605467	2.111354	0.038742
80.661144	2.111305	0.038840
81.716772	2.111250	0.038948
82.772394	2.111237	0.039036
83.828009	2.111238	0.039122
84.883632	2.111228	0.039240
85.939237	2.111201	0.039338
86.994833	2.111204	0.039426
88.050441	2.111212	0.039534
89.106045	2.111177	0.039630
90.161618	2.111141	0.039724
91.217186	2.111087	0.039816
92.272705	2.111033	0.039922"""

# Split the data into lines and then into individual numbers
numbers = []
for line in data.split('\n'):
    columns = line.split('\t')
    for num in columns:
        numbers.append(float(num))

# Sort the numbers in ascending order
sorted_numbers = sorted(numbers)

# Print the sorted numbers (you can format this as needed)
print("Sorted numbers in ascending order:")
for num in sorted_numbers:
    print(num)

# If you want to maintain the 3-column structure but sort each column individually:
print("\nSorted columns individually:")
lines = [line.split('\t') for line in data.split('\n')]
col1 = sorted([float(line[0]) for line in lines])
col2 = sorted([float(line[1]) for line in lines])
col3 = sorted([float(line[2]) for line in lines])

print("Column 1 sorted:", col1)
print("Column 2 sorted:", col2)
print("Column 3 sorted:", col3)
